Atos Terraform Workshop
Atos Internal Terraform Training
8 Jul 2019

Ahmet Erkoc
Senior System Engineer, Atos
ahmet.erkoc@atos.net
aerkoc01@gmail
https://aerkoc.com
@ahmeterkoc01
AKA sly01
* What this training is:

Why Terraform ?

Iterative hands on

Usage of Terraform

* What this training is not:

AWS Training *!*

Detailed Terraform Reference

* I can learn it on my own

.link https://www.terraformupandrunning.com/ Read this book

.link https://blog.gruntwork.io/an-introduction-to-terraform-f17df9c6d180 Read this medium post

.link https://terraform.io Refer this site

* Why attend this session?

No one goes from a messed up working setup to a clean working setup

We will do that

* Why Terraform?

Short answer - it is useful, battle tested and has a strong community

: idempotency ? Idempotent scripts can be called multiple times and each time it’s called, it will have the same effects on the system. This means, a second call will exit with the same result and won’t have any side effects.
: mkdir test vs mkdir -p test , rm test.txt vs rm -f test.txt, ln -s source target vs ln -sf source target 
: if ! grep -qF "/mnt/dev" /etc/fstab; then echo "/dev/sda1 /mnt/dev ext4 defaults 0 0" | sudo tee -a /etc/fstab fi --- if ! grep -qF "ahmet" test.txt; then echo "ahmet added" > test.txt;fi -q means silent mode and -F enables fixed string mode
: - command: /usr/bin/create-database.sh creates=/path/to/database , command execution Idempotent way ! 

* Why manual infra creation is a bad idea?

Manual -> Error prone

Parity loss between dev, stage, prod

*Boring!*

: It does only automate ? Nope, it is also manual of your system

* There has to be a better way

aws cli shell scripts?

For python users *boto*

For ruby users *fog*

* Advantages of homegrown scripts

Customized for your product

You wrote it - you know all about it

: Customized for your product could be either advantange or disadvantage

* Disadvantages of homegrown scripts Customized for your product

You wrote it *only* you know all about it

Need a central box to manage

State information?

Audit trail?

Is this what you are supposed to do?

New product == new infra scripts?

* We need a tool that...

Helps automate infra creation

Can be used by multiple users

Promotes reusability

Is not our headache to maintain

* Enter Terraform

.image images/terraform-image1.png 200 400

Infrastructure as code

Ease of learning curve + active community

Support for multiple cloud vendors

State management

Modules!

* Comparison with Cloudformation

1. Biggest advantage of TF over CF - TF is cloud vendor agnostic

2. CF verbosity > TF

3. CF community < TF

4. CF learning curve =~ TF

5. Other alternatives:

.link https://docs.ansible.com/ansible/latest/modules/list_of_cloud_modules.html Ansible cloud modules

.link https://www.sparkleformation.io/ SparkleFormation

Azure Resource Manager, Google Cloud Deployment Manager

Ansible, Chef, Puppet, SaltStack, etc .. ?

: Configuration management vs orchestration
: Think of ansible and terrafrom as an ochestra of musicians.  The conductor ensures the right number of instruments are there and that all of them are playing correctly. If there is an issue, an orchestration tool will generally remove the misbehaving instrument and replace it with another. Orchestration tools are usually focused on the end result and help to ensure the environment is always in that “state”. 
: Terraform is like this. Terraform will store the state of the environment, and if anything is out of order or missing, it will automatically provide that resource when it is run again. This is fantastic for environments that require a very steady state. If something goes wrong, another “Terraform Apply” will rectify the issue! On the other hand, a configuration management tool is more like an instrument repair person. The configuration management tool, such as Ansible, will configure each instrument to ensure it is on key, free of damage, and is working properly. If there is a problem with an instrument, the CM tool will work to repair the issue rather than just replace the instrument entirely.
: Do keep in mind that Ansible is somewhat of a hybrid in this aspect and able to replace infrastructure and perform orchestration tasks as well, but Terraform is generally regarded as a superior product in this respect due to its more advanced state management capabilities.

* Choose your editor

.link https://atom.io/packages/language-terraform} Atom syntax support

.link https://atom.io/packages/linter-terraform-syntax Atom linting support

.link https://github.com/hashivim/vim-terraform Vim syntax support

.link https://github.com/juliosueiras/vim-terraform-completion Vim syntax support

.link https://github.com/juliosueiras/vim-terraform-completion my favorite(NeoVim terraform completion with linter)

Choose your weapon - *syntax* + basic *linting* (demo)

Use "_terraform_ _validate_" and "_terraform_ _fmt_" otherwise:

* Setup on Cloud9 AWS

.image images/demo.png

* Assignments Code Repo

.link https://github.com/sly01/terraform-workspace You can clone repo from here

* Assignment 1

Just take a look

.play scripts/create.go

.play scripts/delete.go

* Assignment 2

One file to rule them all - main.tf

*Good:* works

*Bad:* Hard to maintain

: How to get syntax ?
: https://www.terraform.io/docs/providers/aws/index.html
: https://github.com/dtan4/terraforming  terraforming ec2
: terraform graph | dot -Tpng > graph.png
: resource PROVIDER_TYPE NAME {
: [CONFIG …]
: }

* Terraform Commands

*Common* *commands:*

 apply: Builds or changes infrastructure

 console: Interactive console for Terraform interpolations

 destroy: Destroys Terraform-managed infrastructure

 fmt: Rewrites configuration files to canonical format

 get: Downloads and installs modules for the configuration

 graph: Creates a visual graph of Terraform resources

 import: Imports existing infrastructure into Terraform

 init: Initializes a new or existing Terraform configuration

 output: Reads an output from a state file

 plan: Generates and shows an execution plan

: terraform import aws_instance.foo i-abcd1234
: terraform output elb.public_dns_name
: terraform fmt --diff

* Terraform Commands
 providers: Prints a tree of the providers used in the configuration

 push: Uploads this Terraform module to Terraform Enterprise to run

 refresh: Updates local state file against real resources

 show: Inspects Terraform state or plan

 taint: Manually marks a resource for recreation

 untaint: Manually unmarks a resource as tainted

 validate: Validates the Terraform files

 version: Prints the Terraform version

 workspace: Workspace management

* Terraform Commands

*Useful* *flags:*

for _plan_:

 -out=path: Writes a plan file to the given path. This can be used as input to the "apply" command.

 -var 'foo=bar': Set a variable in the Terraform configuration. This flag can be set multiple times

for _apply_:

 -auto-approve: This skips interactive approval of plan before applying.

 -var 'foo=bar': This sets a variable in the Terraform configuration. It can be set multiple times.

for _destroy_:

 -auto-approve: Skip interactive approval of plan before applying

 -target <RESOURCE_TYPE>.NAME: Destroy specific resource not whole resources

* HashiCorp Configuration Language

The syntax of Terraform configurations is called HashiCorp Configuration Language (HCL). It is meant to strike a balance between being human-readable and editable, and being machine-friendly. For machine-friendliness, Terraform can also read JSON configurations. For general Terraform configurations, however, we recommend using the HCL Terraform syntax.

*Terraform* *code* *files*

The Terraform language uses configuration files that are named with the .tf file extension. There is also a JSON-based variant of the language that is named with the .tf.json file extension.

  resource "aws_instance" "example" {
    ami = "abc123"

    network_interface {
      # ...
    }
  }

: Only need to know 7 different elements(3 of them important) terraform(remote state, terra version, provider version), providers(region, provider version, credentials), resource, variable, data(Data sources allow data to be fetched or computed for use elsewhere in Terraform configuration), output, module
* Syntax Reference

- Single line comments start with #.
- Multi-line comments are wrapped with /* and */.
- Values are assigned with the syntax of key = value.
- Strings are in double-quotes.
- Strings can interpolate other values using syntax wrapped in ${}, for example ${var.foo}.
- Numbers are assumed to be base 10.
- Boolean values: true, false
- Lists of primitive types can be made with square brackets ([]), for example ["foo", "bar", "baz"].
- Maps can be made with braces ({}) and colons (:), for example { "foo": "bar", "bar": "baz" }.

: Tags was changed tags {} tags = {}
: Interpolation was changed in terraform 0.12 as follow - format("la-terraform-%d", random_id.tf_bucket_id.dec)
: format("%s-%d", var.project_name, random_id.tf_bucket_id.dec)
: output -> value = var.project_name

* Style Conventions

- Indent two spaces for each nesting level.
- With multiple arguments, align their equals signs.

*Example* *Deploying* *a* *container* *using* *Terraform*

  # Download the latest Ghost image
  resource "docker_image" "image_id" {
    name = "ghost:latest"
  }
  # Start the Container
  resource "docker_container" "container_id" {
    name  = "ghost_blog"
    image = "${docker_image.image_id.latest}"
    ports {
      internal = "2368"
      external = "80"
    }
  }
 terraform validate
 terraform plan
 terraform apply
 terraform destroy

: it has own domain specific language DSL called HCL(HashiCorp configuration language). It is declarative programming not imperative. Imagine api scripts which has to be in order and sequence but here in terrrafrom dependency is processed by terraform. Here is the difference functional programming and classic programming.

* Assignment 3

Split main.tf

*Good:* Easier to read

*Bad:* Does not handle different environments

Worth mentioning:

.link https://www.terraform.io/docs/state/workspaces.html terraform-workspaces

: For example, a developer working on a complex set of infrastructure changes might create a new temporary workspace in order to freely experiment with changes without affecting the default workspace.
: Non-default workspaces are often related to feature branches in version control. The default workspace might correspond to the "master" or "trunk" branch, which describes the intended state of production infrastructure.

* Assignment 4

Split same code across multiple environments

*Good:* works

*Bad:* Repetition of code - only env var different

: We will improve this code base using terraform workspace and map type variable, but before going that one let's have a look variables management a bit closer

* Assignment 4.5

Let's take a look how variables management in terraform

Variables could be stored in files

- Not good in terms of security
Variables could be stored in environment

- Again not good in terms of security

Variables could be given as parameter, generally exported from somewhere else like jenkins, vault, etc...

: TF_VAR_name
: https://www.terraform.io/docs/commands/environment-variables.html

: terraform show

: Interpolation syntax https://www.terraform.io/docs/configuration-0-11/interpolation.html

* Assignment 5

tfvars to abstract out common code

*Good:* works

*Bad:* same as previous case but now both dev and prod exactly the same

: DRY principle was broken here

* Assignment 6

local module

*Good:* works

*Bad:* Infra and module tightly coupled

* Assignment 6.5

*Preliminary* for Assignment 7

remote module

.link https://www.terraform.io/docs/modules/sources.html#github Module Sources

*Good:* decoupling, versioning

*Bad:* Long terraform commands to document (in *assigment7*)


* Assignment 7

remote module

.link https://www.terraform.io/docs/modules/sources.html#github Module Sources

*Good:* decoupling, versioning

*Bad:* Long terraform commands to document

Tips:

.link https://github.com/segmentio/terraform-docs terraform-docs

: terraform-docs to generate - terraform-docs markdown <module-name>

* Assignment 8

Split the creation keeping in mind the infra and/or the users, Makefile to the mix

Remote state

*Good:* cleaner, modular than previous approach, make X helps

*Bad:* please share your ideas !

: Makefile, rakefile ?

* Splitting infra creation advantages

Allow closer inspection

Remote module and versioning

Remote state allows team to collaborate

* One shot v/s incremental

Avoid extremeties: whole universe v/s each component

Do simple splits: network, compute, storage

One shot:

- Less repetition
- Magical?
- Manually do targeted destroys -> terraform destroy -target resource_type.name

Incremental:

- More repetition
- Remember dependency order
- One step at a time

* Reference

.link https://blog.gruntwork.io/an-introduction-to-terraform-f17df9c6d180 An Introduction to Terraform

.link https://www.terraform.io/docs/index.html Terraform Docs

.link https://www.terraform-best-practices.com/ Best Practices

.link http://saurabh-hirani.github.io/writing/2018/08/01/terraform-workshop Terraform-workshop Saurabh Hirani

* Q/A
